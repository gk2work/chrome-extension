{"ast":null,"code":"import { Observable, BehaviorSubject, from, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http; // BehaviorSubject to track authentication state\n\n      this.authenticated = new BehaviorSubject(false); // Check if user is already authenticated on service initialization\n\n      this.checkAuthState();\n    }\n    /**\n     * Check chrome storage for existing auth token\n     */\n\n\n    checkAuthState() {\n      // Convert chrome storage API to observable\n      from(new Promise(resolve => {\n        chrome.storage.local.get(['authToken'], result => {\n          resolve(result.authToken || '');\n        });\n      })).pipe(tap(token => {\n        // Update authentication state based on token presence\n        this.authenticated.next(!!token);\n      })).subscribe();\n    }\n    /**\n     * Log in a user with username and password\n     * @param username User's username\n     * @param password User's password\n     */\n\n\n    login(username, password) {\n      // For demonstration, you'd replace this URL with your actual authentication endpoint\n      return this.http.post(`${environment.apiUrl}/auth/login`, {\n        username,\n        password\n      }).pipe(tap(response => {\n        // Save token to chrome storage\n        chrome.storage.local.set({\n          authToken: response.token\n        }); // Update authentication state\n\n        this.authenticated.next(true);\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return of({\n          token: '',\n          user: {\n            id: '',\n            username: ''\n          }\n        });\n      }));\n    }\n    /**\n     * Check if user is authenticated\n     */\n\n\n    isAuthenticated() {\n      return this.authenticated.asObservable();\n    }\n    /**\n     * Get the current auth token\n     */\n\n\n    getAuthToken() {\n      return from(new Promise(resolve => {\n        chrome.storage.local.get(['authToken'], result => {\n          resolve(result.authToken || '');\n        });\n      }));\n    }\n    /**\n     * Log out the current user\n     */\n\n\n    logout() {\n      return from(new Promise(resolve => {\n        chrome.storage.local.remove('authToken', () => {\n          this.authenticated.next(false);\n          resolve(true);\n        });\n      }));\n    } // For demonstration purposes only - mocks a successful login\n\n\n    mockLogin(username, password) {\n      // Demo credentials\n      if (username === 'demo' && password === 'password') {\n        const mockResponse = {\n          token: 'mock-jwt-token-' + Math.random().toString(36).substring(2),\n          user: {\n            id: '1',\n            username: 'demo'\n          }\n        }; // Save token to chrome storage\n\n        chrome.storage.local.set({\n          authToken: mockResponse.token\n        }); // Update authentication state\n\n        this.authenticated.next(true);\n        return of(mockResponse);\n      } else {\n        // Return an error for invalid credentials\n        return new Observable(observer => {\n          observer.error({\n            error: {\n              message: 'Invalid username or password'\n            }\n          });\n        });\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}