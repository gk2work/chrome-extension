{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      return this.authService.getAuthToken().pipe(take(1), switchMap(token => {\n        // If we have a token, add it to the request\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n        }\n\n        return next.handle(request).pipe(catchError(error => {\n          // If we get a 401 Unauthorized response, redirect to login\n          if (error.status === 401) {\n            this.authService.logout();\n            this.router.navigate(['/login']);\n          }\n\n          return throwError(() => error);\n        }));\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}